<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[CCCJ]]></title>
  <link href="CCCJ.blog/atom.xml" rel="self"/>
  <link href="CCCJ.blog/"/>
  <updated>2017-11-16T09:42:27+08:00</updated>
  <id>CCCJ.blog/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im">MWeb</generator>

  
  <entry>
    <title type="html"><![CDATA[11月15日 周三]]></title>
    <link href="CCCJ.blog/15107613204773.html"/>
    <updated>2017-11-15T23:55:20+08:00</updated>
    <id>CCCJ.blog/15107613204773.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">11月15日 / 周三 Diary</h2>

<blockquote>
<p>充实指数  //  60%   心情指数 // 60%</p>
</blockquote>

<h4 id="toc_1">当日完成事件</h4>

<ul>
<li> 英语</li>
<li> fe5课程 作业也完场 (差笔记)</li>
</ul>

<h4 id="toc_2">没有完成的事件</h4>

<ul>
<li> fe5 笔记</li>
</ul>

<h4 id="toc_3">明天要做的事情</h4>

<ol>
<li>fe5 笔记</li>
<li>品牌管理作业 &amp; 消费心理学作业</li>
<li>fe6 </li>
<li>20 个单词</li>
</ol>

<h3 id="toc_4">关于英语</h3>

<p>英语感觉背的还不是很熟练, 老容易忘, 而且还总是读错. 音标完全不会, 需要抽时间来学习音标.</p>

<blockquote>
<p>基础太弱, 需要补基础, 比如学个音标 zzz</p>
</blockquote>

<h3 id="toc_5">关于web前端</h3>

<p>补上了昨天的 fe5 , 但是还差一个第五课的笔记没有写, 明天补上, 然后就是先暂停 c语言 的学习, 把精力都放在 前端的学习上面. </p>

<blockquote>
<p>感觉课程的作业不是很全, 在找作业上费了好多时间, 以后不找了. 反正也找不到了<br/>
看书看书看书, c都停掉了, 使劲学!</p>
</blockquote>

<h3 id="toc_6">总结</h3>

<p>今天过的还行, 但是还是会分神在别的事情上浪费时间, 今天就看了 b站, zealer, 总是控制不住自己. 明天需要改正, 更多的注意一下. </p>

<blockquote>
<p>自己的 <strong>时间利用率</strong> 还是太低了, 要专注, 专注, 更专注!</p>
</blockquote>

<h4 id="toc_7">加油, 加油! UP!UP!UP!</h4>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[十一月 / 第三周]]></title>
    <link href="CCCJ.blog/15107474209600.html"/>
    <updated>2017-11-15T20:03:40+08:00</updated>
    <id>CCCJ.blog/15107474209600.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">第三周计划修订</h2>

<h4 id="toc_1">web前端课程</h4>

<p>前端学习计划不变</p>

<ul>
<li>lessons 5, 6, 7 </li>
<li>时间 : 周二  /  周四  /  周六</li>
</ul>

<h4 id="toc_2">阅读 HTML &amp; CSS</h4>

<ul>
<li>原来花在 C 上面的时间, 现在先看这个</li>
<li>时间 : 尽量多看, 每天看 1小时左右</li>
</ul>

<h4 id="toc_3">英语的学习</h4>

<ul>
<li>单词 20 / 每天</li>
<li>时间 : 周一 ---&gt; 周六</li>
<li>周六 &amp; 周日 找时间记录和<strong>复习</strong>一周所学的单词</li>
</ul>

<h4 id="toc_4">c语言 <code>(暂停)</code></h4>

<ul>
<li>同时学习实在不能专心, 暂时放一边</li>
</ul>

<blockquote>
<p>周四 :  Web前端 / HTML &amp; CSS /英语 <br/>
周五 :   HTML &amp; CSS / 英语 <br/>
周六 :  Web前端 / HTML &amp; CSS / 英语 <br/>
周日 :  陪媳妇 </p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web 前端笔记 Lesson 5]]></title>
    <link href="CCCJ.blog/15107209480009.html"/>
    <updated>2017-11-15T12:42:28+08:00</updated>
    <id>CCCJ.blog/15107209480009.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">查找元素</h3>

<p>查找元素使用 <code>document.querySelector()</code> 函数, 这个函数的参数是一个选择器(和 CSS 选择器一样),选择器语法和 CSS 选择器一样, 现在只用 3 个基础选择器</p>

<pre><code class="language-js">// 元素选择器
var body = document.querySelector(&#39;body&#39;)
// class 选择器, 用的是   .类名
var form = document.querySelector(&#39;.login-form&#39;)
// id 选择器, 用的是   #id
var loginButton = document.querySelector(&#39;#id-button-login&#39;)
// log 出来看看
log(body, form, loginButton)
</code></pre>

<h3 id="toc_1">操作元素</h3>

<p><strong>创建</strong> : 用 <code>document.createElement</code> 函数创建一个元素</p>

<pre><code class="language-js">var button = document.createElement(&#39;button&#39;);
// 用 innerHTML 设置属性
button.innerHTML = &#39;注册用户&#39;

&lt;button&gt;注册用户&lt;/button&gt;
</code></pre>

<p><strong>修改</strong> : 用 <code>appendChild</code> 给一个元素添加子元素</p>

<pre><code class="language-js">// 这里我们给 .login-form 添加刚才创建好的按钮
var form = document.querySelector(&#39;.login-form&#39;)
form.appendChild(button)
</code></pre>

<p><strong>删除元素</strong> : </p>

<pre><code class="language-js">var pwd = document.querySelector(&#39;#id-input-password&#39;)
// 以下两种方法都可以删除元素
// 一种是自毁 (一般用自毁)
// 一种是父节点删除子元素
pwd.remove()
// form.removeChild(pwd)
</code></pre>

<h3 id="toc_2">事件</h3>

<p>事件是用来处理响应的一个机制, 这个响应可以来自于用户(点击, 鼠标移动, 滚动), 也可以来自于浏览器<br/>
<strong>例子</strong></p>

<ul>
<li>给按钮添加一个点击的事件</li>
</ul>

<pre><code class="language-js">// 1, 获得按钮
var loginButton = document.querySelector(&#39;#id-button-login&#39;)
// 2, 声明一个函数, 用于在按钮点击后执行
var clicked = function(event) {
    log(&#39;按钮被点击到了&#39;, event)
}
// 3, 添加事件, 使用 addEventListener 函数, 它有两个参数
// 第一个是事件的名字, 第二个是事件发生后会被自动调用的函数
loginButton.addEventListener(&#39;click&#39;, clicked)
// loginButton 发生了 &#39;click&#39; 事件后调用 clicked 函数
</code></pre>

<ul>
<li>批量添加事件</li>
</ul>

<pre><code class="language-js">var buttons = document.querySelectorAll(&#39;button&#39;)
for (var i = 0; i &lt; buttons.length; i++) {
    var button = buttons[i]
    button.addEventListener(&#39;click&#39;, function(event){
        var self = event.target
        if (self.innerHTML == &#39;注册用户&#39;) {
            log(&#39;注册按钮&#39;)
        } else {
            log(&#39;登录按钮&#39;)
        }
        console.log(&#39;循环批量添加click事件&#39;, self.id)
    })
}
</code></pre>

<h3 id="toc_3">添加选项卡效果</h3>

<p>给多个元素挂上同一个事件</p>

<pre><code class="language-js">// 选择多个元素使用函数 querySelectorAll
var buttons = document.querySelectorAll(&#39;.radio-button&#39;)
// 循环遍历每个元素, 并且绑定点击事件
for (var i = 0; i &lt; buttons.length; i++) {
    var button = buttons[i]
    button.addEventListener(&#39;click&#39;, function(event){
        // 注意, 这次我们直接定义了函数作为参数传递, 这样做是合法的
        // 另外, 我们增加了一个 event 参数
        // 浏览器会给事件响应函数传递一个参数, 它代表了事件本身
        // 我们可以用 event.target 取出响应事件的元素
        var self = event.target
        // clearActive 函数是我们自己定义的
        // 目的是删除其他元素的 active class
        clearActive()
        // add 可以增加一个 class
        self.classList.add(&#39;active&#39;)
    })
}
//
var clearActive = function() {
    var s = document.querySelector(&#39;.active&#39;)
    if (s != null) {
        // 使用 classList 可以访问一个元素的所有 class
        // remove 可以删除一个 class
        s.classList.remove(&quot;active&quot;)
    }
}
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[11月14日 周二]]></title>
    <link href="CCCJ.blog/15106751751906.html"/>
    <updated>2017-11-14T23:59:35+08:00</updated>
    <id>CCCJ.blog/15106751751906.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">11月14日 / 周二 Diary</h2>

<blockquote>
<p>充实指数  //  30% </p>
</blockquote>

<h4 id="toc_1">当日完成事件</h4>

<ul>
<li> 英语</li>
<li> fe4一半作业....</li>
</ul>

<h4 id="toc_2">没有完成的事件</h4>

<ul>
<li> fe5课程</li>
</ul>

<h3 id="toc_3">关于英语</h3>

<p>英语学习坚持了两天, 今天差点就没把 20 个单词背下来, 差点就松懈了. <br/>
如果自己连英语都不能学好, 那那么多的想法还实现个什么呢?</p>

<h3 id="toc_4">关于web前端</h3>

<p>今天的前端学习任务完全没有完成, 甚至说都没有开始, 本来准备的是完场 <strong>第五课</strong> 但是今天连第四课的尾巴都没有结束掉, 很失败.</p>

<h4 id="toc_5"><strong>原因</strong></h4>

<blockquote>
<ol>
<li> <strong>时间上的安排很不合理</strong>, 早上的时候就应该抽空把英语背完, 然后就应该开始着手完成当日的前端学习任务, 但是早上居然睡到了 <strong>十点半</strong> 才起的床,  问题很大, 因为睡这么长时间等于浪费了两个多小时</li>
<li> <strong>乱做别的事情</strong>, 起床以后的两个小时里面, 就在乱找东西, 感觉好像什么事情都没有干, 下课回来的时候也在乱找东西, 看视频, 发呆, 做事情没有目的性, <strong>没有主次</strong></li>
</ol>
</blockquote>

<h4 id="toc_6"><strong>如何改正</strong></h4>

<blockquote>
<ol>
<li>在该做正确事情的时间里, 先按照步骤完成当日应该完成的任务</li>
<li>不要在没有完成当日任务的时候, 做不应该做的事情, 比如看 B站, 玩手机, 找软件等等</li>
</ol>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web 前端笔记 Lesson 4]]></title>
    <link href="CCCJ.blog/15106508082944.html"/>
    <updated>2017-11-14T17:13:28+08:00</updated>
    <id>CCCJ.blog/15106508082944.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">object (对象)</h3>

<ul>
<li><strong>object</strong> 是一个非常重要的存储数据的类型</li>
<li><strong>object</strong> 和 <strong>array</strong> 是最重要的两个存储数据的工具</li>
<li><strong>array</strong> 通过数字 <strong>下标</strong> 来访问, <strong>object</strong> 通过 <strong>key(键)</strong> 来访问</li>
</ul>

<h4 id="toc_1">创建 object</h4>

<pre><code class="language-js">var taoer = {
    &#39;name&#39; : &#39;gua&#39;,
    &#39;height&#39; : 168,
}
// key 中的引号可以省略, 当没有奇怪的符号的时候
// 
var taoer = {
    name : &#39;gua&#39;,
    height : 168,
}

console.log(&#39;object &#39;, taoer)
</code></pre>

<ul>
<li>运行, 输出如下</li>
</ul>

<pre><code class="language-js">object  {name: &quot;gua&quot;, height: 168}
</code></pre>

<p>可见, 字典的创建是花括号 { } , 字典的内容是成对出现的, 由冒号 &#39; &#39; 分隔开</p>

<ul>
<li> <strong>左边</strong> 是 key(键), 几乎所有情况下, 都是字符串, 这也是它的主要用法</li>
<li> <strong>右边</strong> 是 valie(值), 可以是任意类型, 包括 <em>number</em> <em>string</em> <em>bool</em> <em>object</em> 等</li>
</ul>

<h4 id="toc_2">访问 (读取 / 使用) object 中的元素</h4>

<ul>
<li>通过 [ ] 语法可以用 key 得到 value</li>
</ul>

<pre><code class="language-javascript">console.log(&#39;通过 key 访问 object 的元素&#39;)
console.log(taoer[&#39;name&#39;])
console.log(taoer[&#39;height&#39;])
</code></pre>

<ul>
<li>运行, 输出如下</li>
</ul>

<pre><code class="language-js">通过 key 访问 object 的元素 
gua
168
</code></pre>

<h4 id="toc_3">点语法</h4>

<pre><code class="language-javascript">console.log(&#39;通过 点语法 访问 object 的元素&#39;)
console.log(taoer.name)
console.log(taoer.height)
</code></pre>

<ul>
<li><p>点语法在 两种 情况下无法使用</p>

<ol>
<li>key 包含了空格等字符</li>
<li>key 存储在一个变量中, 不能用点语法通过变量的值来访问</li>
</ol></li>
</ul>

<h4 id="toc_4">增加 / 修改 object 中的元素</h4>

<pre><code class="language-js">var gua = {
    name : &#39;xiaogua&#39;,
    height : 169,
}
</code></pre>

<ul>
<li>增加一个元素</li>
</ul>

<pre><code class="language-javascript">gua[&#39;gender&#39;] = &#39;男&#39;
// 或者点语法
gua.gender = &#39;男&#39;

console.log(&#39;object增加&#39;, gua)
console.log(&#39;object增加&#39;, gua[&#39;gender&#39;])
// object增加 {name: &quot;xiaogua&quot;, height: 169, gender: &quot;男&quot;}
// object增加 男
</code></pre>

<ul>
<li>修改已有的元素</li>
</ul>

<pre><code class="language-javascript">gua[&#39;name&#39;] = &#39;gua&#39;
console.log(&#39;object修改&#39;, gua)
// object修改 {name: &quot;gua&quot;, height: 169, gender: &quot;男&quot;}
</code></pre>

<ul>
<li>删除元素</li>
</ul>

<pre><code class="language-javascript">delete gua.gender
console.log(&#39;object 删除&#39;, gua)
//
// object 删除 {name: &quot;gua&quot;, height: 169, ok: 222, zzz: &quot;nihao&quot;}
</code></pre>

<h4 id="toc_5">作业代码摘要</h4>

<ul>
<li>找相同字符</li>
</ul>

<pre><code class="language-js">var find = function(s1, s2) {
    /*
    s1 s2 都是 string
    但 s2 的长度是 1

    返回 s2 在 s1 中的下标, 从 0 开始, 如果不存在则返回 -1
    */
    var index = -1
    for (var i = 0; i &lt; s1.length; i++) {
        if(s1[i] == s2) {
            index = i
            break
        }
    }
    return index
}
</code></pre>

<ul>
<li>返回字符 char 便宜 n 位后的字符</li>
</ul>

<pre><code class="language-js">var shiftedChar = function (char, n) {
    // 创建字母表
    var lower = &#39;abcdefghijklmnopqrstuvwxyz&#39;
    var upper = &#39;ABCDEFGHIJKLMNOPQRSTUVWXYZ&#39;
    // 定义 result 为 char, 当不为字母的时候直接返回 char
    var result = char
    var index = find(upper, char)
    // 这里我们只考虑是字符的情况
    if (index &gt; -1) {
        // 大写字符
        // 算出偏移后的下标
        // + 26 是为防止左移的时候下标小于 0
        var newIndex = (index + n + 26) % 26
        result = upper[newIndex]
   } else {
        // 这是小写字母
        index = find(lower, char)
        if (index &gt; -1) {
            var newIndex = (index + n + 26) % 26
            result = lower[newIndex]
        }
    }
    return result
}
</code></pre>

<ul>
<li>凯撒加密, 对于一个字符串, 整体移位, 就是加密</li>
</ul>

<pre><code class="language-js">var decode = function(s, shift) {
    var result = &#39;&#39;
    for (var i = 0; i &lt; s.length; i++) {
        var c1 = s[i]
        // 使用 shiftedChar 函数移动字符串
        var c2 = shiftedChar(c1, shift)
        result += c2
    }
    return result
}
</code></pre>

<ul>
<li>破译密码</li>
</ul>

<pre><code class="language-js">var code = &#39;VRPHWLPHV L ZDQW WR FKDW ZLWK BRX,EXW L KDYH QR UHDVRQ WR FKDW ZLWK BRX&#39;

var decode4 = function(s) {
    for (var i = 0; i &lt; 26; i++) {
        var result = decode(code, i)
        log(result, i)
    }
}
</code></pre>

]]></content>
  </entry>
  
</feed>
